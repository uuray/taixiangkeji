//banner
$(function(){
    $('#slides').slides({
        container: 'slides-container',
        preload: true,
        play: 4000,
        pause: 1500,
        hoverPause: true,
        effect: 'slide',
        slideSpeed: 850
    })

})


$(document).ready(function(){
        $(".announce-info").Scroll({line:1,speed:500,timer:3000,up:"announce-btn-up",down:"announce-btn-down"});//ÂÖ¨ÂëäÊªöÂä®
});

//Êó†ÁºùÊªöÂä®
function marquee(i, direction){
    var obj = document.getElementById("marquee" + i);
    var obj1 = document.getElementById("marquee" + i + "_1");
    var obj2 = document.getElementById("marquee" + i + "_2");
    if (direction == "up"){
        if (obj2.offsetTop - obj.scrollTop <= 0){
            obj.scrollTop -= (obj1.offsetHeight + 30);
        }else{
            var tmp = obj.scrollTop;
            obj.scrollTop++;
            if (obj.scrollTop == tmp){
                obj.scrollTop = 1;
            }
        }
    }else{
        if (obj2.offsetWidth - obj.scrollLeft <= 0){
            obj.scrollLeft -= obj1.offsetWidth;
        }else{
            obj.scrollLeft++;
        }
    }
}


function marqueeStart(i, direction){
    var obj = document.getElementById("marquee" + i);
    var obj1 = document.getElementById("marquee" + i + "_1");
    var obj2 = document.getElementById("marquee" + i + "_2");

    obj2.innerHTML = obj1.innerHTML;
    var marqueeVar = window.setInterval("marquee("+ i +", '"+ direction +"')", 30);
    obj.onmouseover = function(){
        window.clearInterval(marqueeVar);
    }
    obj.onmouseout = function(){
        marqueeVar = window.setInterval("marquee("+ i +", '"+ direction +"')", 30);
    }
}

//ÂêåÈ°µË∑≥ËΩ¨
//È¶ñÈ°µÁö?
$(function () {
    $(window).scroll(function () {
        var scrollTop = $(document).scrollTop();
        var documentHeight = $(document).height();
        var windowHeight = $(window).height();
        var contentItems = $("#body").find(".item");
        var currentItem = "";

        if (scrollTop+windowHeight==documentHeight) {
            currentItem= "#" + contentItems.last().attr("id");
        }else{
            contentItems.each(function () {
                var contentItem = $(this);
                var offsetTop = contentItem.offset().top;
                if (scrollTop > offsetTop - 200) {
                    currentItem = "#" + contentItem.attr("id");
                }
            });
        }
        if (currentItem != $("#go").find(".fon2").attr("href")) {
            $("#go").find(".fon2").removeClass("fon2");
            $("#go").find("[href=" + currentItem + "]").addClass("fon2");
        }
    });
});

// ÂÆâÂÖ®‰∏≠ÂøÉÁö?
$(function () {
    $(window).scroll(function () {
        var scrollTop = $(document).scrollTop();
        var documentHeight = $(document).height();
        var windowHeight = $(window).height();
        var contentItems = $(".main").find(".item");
        var currentItem = "";

        if (scrollTop+windowHeight==documentHeight) {
            currentItem= "#" + contentItems.last().attr("id");
        }else{
            contentItems.each(function () {
                var contentItem = $(this);
                var offsetTop = contentItem.offset().top;
                if (scrollTop > offsetTop - 100) {
                    currentItem = "#" + contentItem.attr("id");
                }
            });
        }
        if (currentItem != $(".til").find(".pon").attr("href")) {
            $(".til").find(".pon").removeClass("pon");
            $(".til").find("[href=" + currentItem + "]").addClass("pon");
        }
    });
});


// ‰∫ßÂìÅ‰∏≠ÂøÉÁö?
$(function () {
    $(window).scroll(function () {
        var scrollTop = $(document).scrollTop();
        var documentHeight = $(document).height();
        var windowHeight = $(window).height();
        var contentItems = $(".probox-content-in").find(".type-box");
        var currentItem = "";

        if (scrollTop+windowHeight==documentHeight) {
            currentItem= "#" + contentItems.last().attr("id");
        }else{
            contentItems.each(function () {
                var contentItem = $(this);
                var offsetTop = contentItem.offset().top;
                if (scrollTop > offsetTop - 100) {
                    currentItem = "#" + contentItem.attr("id");
                }
               
            });
          
        }
    
         
        if (currentItem != $(".til").find(".on").attr("href")) {
            $(".til").find(".on").removeClass("on");
            $(".til").find("[href=" + currentItem + "]").addClass("on");
        }
    });
    $(".s").click(function () {
        $(".til").find(".on").removeClass("on");
        $(this).addClass("on");
    });
});
// JavaScript Document
jQuery.fn.anchorGoWhere = function(options){
    var obj = jQuery(this);
    var defaults = {target:1, timer:300};
    var o = jQuery.extend(defaults,options);
    /*
    var scrollPos;
    if(typeof document.compatMode != 'undefined' && document.compatMode != 'BackCompat') { 
        scrollPos = document.documentElement; 
    }else if (typeof document.body != 'undefined') { 
        scrollPos = document.body; 
    }*/

    obj.each(function(i){
        jQuery(obj[i]).click(function(){
            var _rel = jQuery(this).attr("href").substr(1);
            switch(o.target){
                case 1: 
                    var targetTop = jQuery("#"+_rel).offset().top;
                    jQuery("html,body").animate({scrollTop:targetTop}, o.timer);
                    break;
                case 2:
                    var targetLeft = jQuery("#"+_rel).offset().left;
                    jQuery("html,body").animate({scrollLeft:targetLeft}, o.timer);
                    break;
            }
            return false;
        });
    });
};

/*tab*/
function setTab(m,n){
var tli=document.getElementById("menu"+m).getElementsByTagName("li");
var mli=document.getElementById("main"+m).getElementsByTagName("ul");
for(i=0;i<tli.length;i++){
   tli[i].className=i==n?"con":"";
   mli[i].style.display=i==n?"block":"none";
}
}

/*Âõ∫ÂÆöÂå∫Âùó*/
$(document).ready(function(e) {         
    t = $('.til').offset().top;
    fh = $('.til').height();
    $(window).scroll(function(e){
        s = $(document).scrollTop();    
        if(s > t - 10){
            $('.til').css('position','fixed');      
        }else{
            $('.til').css('position','');
        }
    })
});

//
$(document).ready(function(e) {         
    $(window).scroll(function(e){
        s_2 = $(document).scrollTop();    
        if(s_2 > 350){
            $('#go').css('display','block');    
        }else{
            $('#go').css('display','none');
        }none
    })
});





(function($){
	$.fn.slides = function( option ) {

		// override defaults with specified option
		option = $.extend( {}, $.fn.slides.option, option );

		return this.each(function(){
			
			// wrap slides in control container, make sure slides are block level
			$('.' + option.container, $(this)).children().wrapAll('<div class="slides_control"/>').children().css({
				display:'block'
			});
			
			var elem = $(this),
				control = $('.slides_control',elem),
				total = control.children().size(),
				width = control.children().outerWidth(),
				height = control.children().outerHeight(),
				start = option.start - 1,
				effect = option.effect.indexOf(',') < 0 ? option.effect : option.effect.replace(' ', '').split(',')[0],
				paginationEffect = option.effect.indexOf(',') < 0 ? effect : option.effect.replace(' ', '').split(',')[1],
				next = 0, prev = 0, number = 0, current = 0, loaded, active, clicked, position, direction;	
	
			// 2 or more slides required
			if (total < 2) {
				return;
			}
					
			// change current based on start option number
			if (option.start) {
				current = start;
			};
			
			// randomizes slide order
			if (option.randomize) {
				control.randomize();
			}
			
			// set width based on slide width
			elem.css({ 
				width: width
			});

			$(this).find('li').css({ 
				width: '100%'
			});
			
			// make sure overflow is hidden
			$('.' + option.container, elem).css({
				overflow: 'hidden',
				// fix for ie
				position: 'relative'
			});
			
			control.css({
				position: 'relative',
				// size of control 3 x slide width
				width: ('100%' * 3),
				// set height to slide height
				height: height,
				// center control to slide
				left: '-100%'
			});
			
			// set css for slides	
			control.children().css({
				position: 'absolute',
				top: 0, 
				left: '100%',
				zIndex: 0,
				display: 'none'
			 });
			
			// if autoHeight true, get and set height of first slide
			if (option.autoHeight) {
				control.animate({
					height: control.children(':eq('+ start +')').outerHeight()
				},o.autoHeightSpeed);
			}
			
			// checks if image is loaded
			if (option.preload && control.children()[0].tagName=='IMG') {
				// adds preload image
				elem.css({
					background: 'url(' + option.preloadImage + ') no-repeat 50% 50%'
				});
				
				// gets image src, with cache buster
				var img = $('img:eq(' + start + ')', elem).attr('src') + '?' + (new Date()).getTime();
				
				// checks if image is loaded
				$('img:eq(' + start + ')', elem).attr('src', img).load(function() {
					// once image is fully loaded, fade in
					$(this).fadeIn(option.fadeSpeed,function(){
						$(this).css({
							zIndex: 2
						});
						// removes preload image
						elem.css({
							background: ''
						});
						// let the script know everything is loaded
						loaded = true;
					});
				});
			} else {
				// if no preloader fade in start slide
				control.find(':eq(' + start + ')').fadeIn(option.fadeSpeed,function(){
					// let the script know everything is loaded
					loaded = true;
				});
			}
			
			// click slide for next
			if (option.bigTarget) {
				// set cursor to pointer
				control.children().css({
					cursor: 'pointer'
				});
				// click handler
				control.children().click(function(){
					// animate to next on slide click
					animate('next', effect);
					return false;
				});									
			}
			
			// pause on mouseover
			if (option.hoverPause && option.play) {
				control.children().bind('mouseover',function(){
					// on mouse over stop
					stop();
				});
				control.children().bind('mouseleave',function(){
					// on mouse leave start pause timeout
					pause();
				});
			}
			
			// next button
			$('.' + option.next ,elem).click(function(e){
				e.preventDefault();
				if (option.play) {
					pause();
				};
				animate('next', effect);
			});
			
			// previous button
			$('.' + option.prev, elem).click(function(e){
				e.preventDefault();
				if (option.play) {
					 pause();
				};
				animate('prev', effect);
			});
			
			// pause button
			$('.pause').bind('click',function(){
				// on click stop
				stop();
			});
			
			// generate pagination
			/* if (option.generatePagination) {
				// create unordered list
				elem.append('<ul class='+ option.paginationClass +'></ul>');
				// for each slide create a list item and link
				control.children().each(function(){
					$('.' + option.paginationClass, elem).append('<li><a rel='+ number +' href="#">'+ (number+1) +'</a></li>');
					number++;
				});
			} */
			// add current class to start slide pagination
			$('.' + option.paginationClass + ' span a:eq('+ start +')', elem).parent().addClass('current');
			// click handling 
			$('.' + option.paginationClass + ' span a', elem ).click(function(){
				// pause slideshow
				if (option.play) {
					 pause();
				};
				// get clicked, pass to animate function					
				clicked = $(this).attr('rel');
				// if current slide equals clicked, don't do anything
				if (current != clicked) {
					animate('pagination', paginationEffect, clicked);
				}
				return false;
			});
		
			if (option.play) {
				// set interval
				playInterval = setInterval(function() {
					animate('next', effect);
				}, option.play);
				// store interval id
				elem.data('interval',playInterval);
			};
				
			function stop() {
				// clear interval from stored id
				clearInterval(elem.data('interval'));
			};

			function pause() {
				if (option.pause) {
					// clear timeout and interval
					clearTimeout(elem.data('pause'));
					clearInterval(elem.data('interval'));
					// pause slide show for option.pause amount
					pauseTimeout = setTimeout(function() {
						// clear pause timeout
						clearTimeout(elem.data('pause'));
						// start play interval after pause
						playInterval = setInterval(	function(){
							animate("next", effect);
						},option.play);
						// store play interval
						elem.data('interval',playInterval);
					},option.pause);
					// store pause interval
					elem.data('pause',pauseTimeout);
				} else {
					// if no pause, just stop
					stop();
				}
			};
			
			// animate slides
			function animate(direction, effect, clicked) {
				width = control.children().outerWidth();
				if (!active && loaded) {
					active = true;
					switch(direction) {
						case 'next':
							// change current slide to previous
							prev = current;
							// get next from current + 1
							next = current + 1;
							// if last slide, set next to first slide
							next = total === next ? 0 : next;
							// set position of next slide to right of previous
							position = width*2;
							// distance to slide based on width of slides
							direction = -width*2;
							// store new current slide
							current = next;
						break;
						case 'prev':
							// change current slide to previous
							prev = current;
							// get next from current - 1
							next = current - 1;
							// if first slide, set next to last slide
							next = next === -1 ? total-1 : next;								
							// set position of next slide to left of previous
							position = 0;								
							// distance to slide based on width of slides
							direction = 0;		
							// store new current slide
							current = next;
						break;
						case 'pagination':
							// get next from pagination item clicked, convert to number
							next = parseInt(clicked,10);
							// get previous from pagination item with class of current
							prev = $('.' + option.paginationClass + ' span.current a', elem).attr('rel');
							// if next is greater then previous set position of next slide to right of previous
							if (next > prev) {
								position = width*2;
								direction = -width*2;
							} else {
							// if next is less then previous set position of next slide to left of previous
								position = 0;
								direction = 0;
							}
							// store new current slide
							current = next;
						break;
					}
					
					// fade animation
					if (effect === 'fade') {
						// fade animation with crossfade
						if (option.crossfade) {
							// put hidden next above current
							control.children(':eq('+ next +')', elem).css({
								zIndex: 10
							// fade in next
							}).fadeIn(option.fadeSpeed, function(){
								// hide previous
								control.children(':eq('+ prev +')', elem).css({
									display: 'none',
									zIndex: 0
								});
								// reset z index
								$(this).css({
									zIndex: 0
								});
								// end of animation
								active = false;
							});
						} else {
							// fade animation with no crossfade
							control.children(':eq('+ prev +')', elem).fadeOut(option.fadeSpeed,function(){
								// animate to new height
								if (option.autoHeight) {
									control.animate({
										// animate container to height of next
										height: control.children(':eq('+ next +')', elem).outerHeight()
									}, option.autoHeightSpeed,
									// fade in next slide
									function(){
										control.children(':eq('+ next +')', elem).fadeIn(elem.data('slides').fadeSpeed);
									});
								} else {
								// if fixed height
									control.children(':eq('+ next +')', elem).fadeIn(option.fadeSpeed,function(){
										// fix font rendering in ie, lame
										if($.browser.msie) {
											$(this).get(0).style.removeAttribute('filter');
										}
									});
								}									
								// end of animation
								active = false;
							});
						}
					// slide animation
					} else {
						// move next slide to right of previous
						control.children(':eq('+ next +')').css({
							left: position,
							display: 'block'
						});
						// animate to new height
						if (option.autoHeight) {
							control.animate({
								left: direction,
								height: control.children(':eq('+ next +')').outerHeight()
							},option.slideSpeed,function(){
								control.css({
									left: '-100%'
								});
								control.children(':eq('+ next +')').css({
									left: '100%',
									zIndex: 5
								});
								// reset previous slide
								control.children(':eq('+ prev +')').css({
									left: '100%',
									display: 'none',
									zIndex: 0
								});
								// end of animation
								active = false;
							});
						// if fixed height
						} else {
							// animate control
							control.animate({
								left: direction
							},option.slideSpeed,function(){
								// after animation reset control position
								control.css({
									left: '-100%'
								});
								// reset and show next
								control.children(':eq('+ next +')').css({
									left: '100%',
									zIndex: 5
								});
								// reset previous slide
								control.children(':eq('+ prev +')').css({
									left: '100%',
									display: 'none',
									zIndex: 0
								});
								// end of animation
								active = false;
							});
						}
					}
					// set current state for pagination
					if (option.pagination) {
						// remove current class from all
						$('.'+ option.paginationClass +' span.current', elem).removeClass('current');
						// add current class to next
						$('.'+ option.paginationClass +' span a:eq('+ next +')', elem).parent().addClass('current');
					}
				}
			}; // end animate function
		});
	};
	
	// default options
	$.fn.slides.option = {
		preload: true, // boolean, Set true to preload images in an image based slideshow
		preloadImage: '/img/loading.gif', // string, Name and location of loading image for preloader. Default is "/img/loading.gif"
		container: 'slides_container', // string, Class name for slides container. Default is "slides_container"
		next: 'next', // string, Class name for next button
		prev: 'prev', // string, Class name for previous button
		pagination: true, // boolean, If you're not using pagination you can set to false, but don't have to
		generatePagination: true, // boolean, Auto generate pagination
		paginationClass: 'pagination', // string, Class name for pagination
		fadeSpeed: 850, // number, Set the speed of the fading animation in milliseconds
		slideSpeed: 850, // number, Set the speed of the sliding animation in milliseconds
		start: 1, // number, Set the speed of the sliding animation in milliseconds
		effect: 'slide', // string, '[next/prev], [pagination]', e.g. 'slide, fade' or simply 'fade' for both
		crossfade: false, // boolean, Crossfade images in a image based slideshow
		randomize: false, // boolean, Set to true to randomize slides
		play: 0, // number, Autoplay slideshow, a positive number will set to true and be the time between slide animation in milliseconds
		pause: 0, // number, Pause slideshow on click of next/prev or pagination. A positive number will set to true and be the time of pause in milliseconds
		hoverPause: false, // boolean, Set to true and hovering over slideshow will pause it
		autoHeight: false, // boolean, Set to true to auto adjust height
		autoHeightSpeed: 350, // number, Set auto height animation time in milliseconds
		bigTarget: false // boolean, Set to true and the whole slide will link to next slide on click
	};
	
	// Randomize slide order on load
	$.fn.randomize = function(callback) {
		function randomizeOrder() { return(Math.round(Math.random())-0.5); }
			return($(this).each(function() {
			var $this = $(this);
			var $children = $this.children();
			var childCount = $children.length;
			if (childCount > 1) {
				$children.hide();
				var indices = [];
				for (i=0;i<childCount;i++) { indices[indices.length] = i; }
				indices = indices.sort(randomizeOrder);
				$.each(indices,function(j,k) { 
					var $child = $children.eq(k);
					var $clone = $child.clone(true);
					$clone.show().appendTo($this);
					if (callback !== undefined) {
						callback($child, $clone);
					}
				$child.remove();
			});
			}
		}));
	};
})(jQuery);



/*
Êáí‰∫∫Âª∫Á´ô http://www.51xuediannao.com/ 
Êáí‰∫∫Âª∫Á´ô‰∏∫ÊÇ®Êèê‰æõ-Âü∫‰∫éjqueryÁâπÊïàÔºåjqueryÂºπÂá∫Â±ÇÊïàÊûúÔºåjsÁâπÊïà‰ª£Á†ÅÂ§ßÂÖ®ÔºåJSÂπøÂëä‰ª£Á†ÅÔºåÂØºËà™ËèúÂçï‰ª£Á†ÅÔºå‰∏ãÊãâËèúÂçï‰ª£Á†ÅÂíåjqueryÁÑ¶ÁÇπÂõæÁâá‰ª£Á†Å„Ä?

jQÂêë‰∏äÊªöÂä®Â∏¶‰∏ä‰∏ãÁøªÈ°µÊåâÈí?
*/
(function($){
$.fn.extend({
        Scroll:function(opt,callback){
                //ÂèÇÊï∞ÂàùÂßãÂå?
                if(!opt) var opt={};
                var _btnUp = $("#"+ opt.up);//Shawphy:Âêë‰∏äÊåâÈíÆ
                var _btnDown = $("#"+ opt.down);//Shawphy:Âêë‰∏ãÊåâÈíÆ
                var timerID;
                var _this=this.eq(0).find("ul:first");
                var     lineH=_this.find("li:first").height(), //Ëé∑ÂèñË°åÈ´ò
                        line=opt.line?parseInt(opt.line,10):parseInt(this.height()/lineH,10), //ÊØèÊ¨°ÊªöÂä®ÁöÑË°åÊï∞ÔºåÈªòËÆ§‰∏∫‰∏ÄÂ±èÔºåÂç≥Áà∂ÂÆπÂô®È´òÂ∫¶
                        speed=opt.speed?parseInt(opt.speed,10):500; //Âç∑Âä®ÈÄüÂ∫¶ÔºåÊï∞ÂÄºË∂äÂ§ßÔºåÈÄüÂ∫¶Ë∂äÊÖ¢ÔºàÊØ´ÁßíÔºâ
                        timer=opt.timer //?parseInt(opt.timer,10):3000; //ÊªöÂä®ÁöÑÊó∂Èó¥Èó¥ÈöîÔºàÊØ´ÁßíÔº?
                if(line==0) line=1;
                var upHeight=0-line*lineH;
                //ÊªöÂä®ÂáΩÊï∞
                var scrollUp=function(){
                        _btnUp.unbind("click",scrollUp); //Shawphy:ÂèñÊ∂àÂêë‰∏äÊåâÈíÆÁöÑÂáΩÊï∞ÁªëÂÆ?
                        _this.animate({
                                marginTop:upHeight
                        },speed,function(){
                                for(i=1;i<=line;i++){
                                        _this.find("li:first").appendTo(_this);
                                }
                                _this.css({marginTop:0});
                                _btnUp.bind("click",scrollUp); //Shawphy:ÁªëÂÆöÂêë‰∏äÊåâÈíÆÁöÑÁÇπÂáª‰∫ã‰ª?
                        });

                }
                //Shawphy:Âêë‰∏ãÁøªÈ°µÂáΩÊï∞
                var scrollDown=function(){
                        _btnDown.unbind("click",scrollDown);
                        for(i=1;i<=line;i++){
                                _this.find("li:last").show().prependTo(_this);
                        }
                        _this.css({marginTop:upHeight});
                        _this.animate({
                                marginTop:0
                        },speed,function(){
                                _btnDown.bind("click",scrollDown);
                        });
                }
               //Shawphy:Ëá™Âä®Êí≠Êîæ
                var autoPlay = function(){
                        if(timer)timerID = window.setInterval(scrollUp,timer);
                };
                var autoStop = function(){
                        if(timer)window.clearInterval(timerID);
                };
                 //Èº†Ê†á‰∫ã‰ª∂ÁªëÂÆö
                _this.hover(autoStop,autoPlay).mouseout();
                _btnUp.css("cursor","pointer").click( scrollUp ).hover(autoStop,autoPlay);//Shawphy:Âêë‰∏äÂêë‰∏ãÈº†Ê†á‰∫ã‰ª∂ÁªëÂÆö
                _btnDown.css("cursor","pointer").click( scrollDown ).hover(autoStop,autoPlay);

        }       
})
})(jQuery);
